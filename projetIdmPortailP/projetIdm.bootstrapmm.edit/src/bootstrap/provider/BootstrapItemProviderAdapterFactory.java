/**
 */
package bootstrap.provider;

import bootstrap.util.BootstrapAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class BootstrapItemProviderAdapterFactory extends BootstrapAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BootstrapItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.Italic} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ItalicItemProvider italicItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.Italic}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createItalicAdapter() {
		if (italicItemProvider == null) {
			italicItemProvider = new ItalicItemProvider(this);
		}

		return italicItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.Background} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BackgroundItemProvider backgroundItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.Background}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBackgroundAdapter() {
		if (backgroundItemProvider == null) {
			backgroundItemProvider = new BackgroundItemProvider(this);
		}

		return backgroundItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.Text} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TextItemProvider textItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.Text}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTextAdapter() {
		if (textItemProvider == null) {
			textItemProvider = new TextItemProvider(this);
		}

		return textItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.HorizontalLine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HorizontalLineItemProvider horizontalLineItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.HorizontalLine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHorizontalLineAdapter() {
		if (horizontalLineItemProvider == null) {
			horizontalLineItemProvider = new HorizontalLineItemProvider(this);
		}

		return horizontalLineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.HorizontalList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HorizontalListItemProvider horizontalListItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.HorizontalList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHorizontalListAdapter() {
		if (horizontalListItemProvider == null) {
			horizontalListItemProvider = new HorizontalListItemProvider(this);
		}

		return horizontalListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.Disabled} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DisabledItemProvider disabledItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.Disabled}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDisabledAdapter() {
		if (disabledItemProvider == null) {
			disabledItemProvider = new DisabledItemProvider(this);
		}

		return disabledItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.BadgeStyle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BadgeStyleItemProvider badgeStyleItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.BadgeStyle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBadgeStyleAdapter() {
		if (badgeStyleItemProvider == null) {
			badgeStyleItemProvider = new BadgeStyleItemProvider(this);
		}

		return badgeStyleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.Display2} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Display2ItemProvider display2ItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.Display2}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDisplay2Adapter() {
		if (display2ItemProvider == null) {
			display2ItemProvider = new Display2ItemProvider(this);
		}

		return display2ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.Page} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PageItemProvider pageItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.Page}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPageAdapter() {
		if (pageItemProvider == null) {
			pageItemProvider = new PageItemProvider(this);
		}

		return pageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.FluidContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FluidContainerItemProvider fluidContainerItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.FluidContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFluidContainerAdapter() {
		if (fluidContainerItemProvider == null) {
			fluidContainerItemProvider = new FluidContainerItemProvider(this);
		}

		return fluidContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.Strong} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StrongItemProvider strongItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.Strong}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStrongAdapter() {
		if (strongItemProvider == null) {
			strongItemProvider = new StrongItemProvider(this);
		}

		return strongItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.Display3} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Display3ItemProvider display3ItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.Display3}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDisplay3Adapter() {
		if (display3ItemProvider == null) {
			display3ItemProvider = new Display3ItemProvider(this);
		}

		return display3ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.ButtonSize} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ButtonSizeItemProvider buttonSizeItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.ButtonSize}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createButtonSizeAdapter() {
		if (buttonSizeItemProvider == null) {
			buttonSizeItemProvider = new ButtonSizeItemProvider(this);
		}

		return buttonSizeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.Vertical} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VerticalItemProvider verticalItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.Vertical}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVerticalAdapter() {
		if (verticalItemProvider == null) {
			verticalItemProvider = new VerticalItemProvider(this);
		}

		return verticalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.Link} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkItemProvider linkItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.Link}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkAdapter() {
		if (linkItemProvider == null) {
			linkItemProvider = new LinkItemProvider(this);
		}

		return linkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.Paragraphe} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParagrapheItemProvider paragrapheItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.Paragraphe}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParagrapheAdapter() {
		if (paragrapheItemProvider == null) {
			paragrapheItemProvider = new ParagrapheItemProvider(this);
		}

		return paragrapheItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.Image} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImageItemProvider imageItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.Image}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImageAdapter() {
		if (imageItemProvider == null) {
			imageItemProvider = new ImageItemProvider(this);
		}

		return imageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.LinkBrand} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkBrandItemProvider linkBrandItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.LinkBrand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkBrandAdapter() {
		if (linkBrandItemProvider == null) {
			linkBrandItemProvider = new LinkBrandItemProvider(this);
		}

		return linkBrandItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.AlertAnimated} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AlertAnimatedItemProvider alertAnimatedItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.AlertAnimated}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAlertAnimatedAdapter() {
		if (alertAnimatedItemProvider == null) {
			alertAnimatedItemProvider = new AlertAnimatedItemProvider(this);
		}

		return alertAnimatedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.Active} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActiveItemProvider activeItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.Active}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActiveAdapter() {
		if (activeItemProvider == null) {
			activeItemProvider = new ActiveItemProvider(this);
		}

		return activeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.Tbody} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TbodyItemProvider tbodyItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.Tbody}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTbodyAdapter() {
		if (tbodyItemProvider == null) {
			tbodyItemProvider = new TbodyItemProvider(this);
		}

		return tbodyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.Tfoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TfootItemProvider tfootItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.Tfoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTfootAdapter() {
		if (tfootItemProvider == null) {
			tfootItemProvider = new TfootItemProvider(this);
		}

		return tfootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.Table} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableItemProvider tableItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.Table}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableAdapter() {
		if (tableItemProvider == null) {
			tableItemProvider = new TableItemProvider(this);
		}

		return tableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.BadgePill} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BadgePillItemProvider badgePillItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.BadgePill}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBadgePillAdapter() {
		if (badgePillItemProvider == null) {
			badgePillItemProvider = new BadgePillItemProvider(this);
		}

		return badgePillItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.Navigation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NavigationItemProvider navigationItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.Navigation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNavigationAdapter() {
		if (navigationItemProvider == null) {
			navigationItemProvider = new NavigationItemProvider(this);
		}

		return navigationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.Basic} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BasicItemProvider basicItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.Basic}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBasicAdapter() {
		if (basicItemProvider == null) {
			basicItemProvider = new BasicItemProvider(this);
		}

		return basicItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.ListItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ListItemItemProvider listItemItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.ListItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createListItemAdapter() {
		if (listItemItemProvider == null) {
			listItemItemProvider = new ListItemItemProvider(this);
		}

		return listItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.UnOrderedList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnOrderedListItemProvider unOrderedListItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.UnOrderedList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnOrderedListAdapter() {
		if (unOrderedListItemProvider == null) {
			unOrderedListItemProvider = new UnOrderedListItemProvider(this);
		}

		return unOrderedListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.AlertLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AlertLinkItemProvider alertLinkItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.AlertLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAlertLinkAdapter() {
		if (alertLinkItemProvider == null) {
			alertLinkItemProvider = new AlertLinkItemProvider(this);
		}

		return alertLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.Border} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BorderItemProvider borderItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.Border}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBorderAdapter() {
		if (borderItemProvider == null) {
			borderItemProvider = new BorderItemProvider(this);
		}

		return borderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.Button} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ButtonItemProvider buttonItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.Button}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createButtonAdapter() {
		if (buttonItemProvider == null) {
			buttonItemProvider = new ButtonItemProvider(this);
		}

		return buttonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.TableCell} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableCellItemProvider tableCellItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.TableCell}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableCellAdapter() {
		if (tableCellItemProvider == null) {
			tableCellItemProvider = new TableCellItemProvider(this);
		}

		return tableCellItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.Title} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TitleItemProvider titleItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.Title}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTitleAdapter() {
		if (titleItemProvider == null) {
			titleItemProvider = new TitleItemProvider(this);
		}

		return titleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.Display4} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Display4ItemProvider display4ItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.Display4}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDisplay4Adapter() {
		if (display4ItemProvider == null) {
			display4ItemProvider = new Display4ItemProvider(this);
		}

		return display4ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.Thead} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TheadItemProvider theadItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.Thead}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTheadAdapter() {
		if (theadItemProvider == null) {
			theadItemProvider = new TheadItemProvider(this);
		}

		return theadItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.OrderList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrderListItemProvider orderListItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.OrderList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrderListAdapter() {
		if (orderListItemProvider == null) {
			orderListItemProvider = new OrderListItemProvider(this);
		}

		return orderListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.BasicList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BasicListItemProvider basicListItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.BasicList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBasicListAdapter() {
		if (basicListItemProvider == null) {
			basicListItemProvider = new BasicListItemProvider(this);
		}

		return basicListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.AlertStyle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AlertStyleItemProvider alertStyleItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.AlertStyle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAlertStyleAdapter() {
		if (alertStyleItemProvider == null) {
			alertStyleItemProvider = new AlertStyleItemProvider(this);
		}

		return alertStyleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.Centered} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CenteredItemProvider centeredItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.Centered}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCenteredAdapter() {
		if (centeredItemProvider == null) {
			centeredItemProvider = new CenteredItemProvider(this);
		}

		return centeredItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.ButtonLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ButtonLinkItemProvider buttonLinkItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.ButtonLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createButtonLinkAdapter() {
		if (buttonLinkItemProvider == null) {
			buttonLinkItemProvider = new ButtonLinkItemProvider(this);
		}

		return buttonLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.Brand} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BrandItemProvider brandItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.Brand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBrandAdapter() {
		if (brandItemProvider == null) {
			brandItemProvider = new BrandItemProvider(this);
		}

		return brandItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.Display1} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Display1ItemProvider display1ItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.Display1}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDisplay1Adapter() {
		if (display1ItemProvider == null) {
			display1ItemProvider = new Display1ItemProvider(this);
		}

		return display1ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.TableRow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableRowItemProvider tableRowItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.TableRow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableRowAdapter() {
		if (tableRowItemProvider == null) {
			tableRowItemProvider = new TableRowItemProvider(this);
		}

		return tableRowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.Padding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PaddingItemProvider paddingItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.Padding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPaddingAdapter() {
		if (paddingItemProvider == null) {
			paddingItemProvider = new PaddingItemProvider(this);
		}

		return paddingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.Margin} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MarginItemProvider marginItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.Margin}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMarginAdapter() {
		if (marginItemProvider == null) {
			marginItemProvider = new MarginItemProvider(this);
		}

		return marginItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.ColoredBorder} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColoredBorderItemProvider coloredBorderItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.ColoredBorder}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColoredBorderAdapter() {
		if (coloredBorderItemProvider == null) {
			coloredBorderItemProvider = new ColoredBorderItemProvider(this);
		}

		return coloredBorderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.FixContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FixContainerItemProvider fixContainerItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.FixContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFixContainerAdapter() {
		if (fixContainerItemProvider == null) {
			fixContainerItemProvider = new FixContainerItemProvider(this);
		}

		return fixContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bootstrap.ButtonStyle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ButtonStyleItemProvider buttonStyleItemProvider;

	/**
	 * This creates an adapter for a {@link bootstrap.ButtonStyle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createButtonStyleAdapter() {
		if (buttonStyleItemProvider == null) {
			buttonStyleItemProvider = new ButtonStyleItemProvider(this);
		}

		return buttonStyleItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (italicItemProvider != null) italicItemProvider.dispose();
		if (backgroundItemProvider != null) backgroundItemProvider.dispose();
		if (textItemProvider != null) textItemProvider.dispose();
		if (horizontalLineItemProvider != null) horizontalLineItemProvider.dispose();
		if (horizontalListItemProvider != null) horizontalListItemProvider.dispose();
		if (disabledItemProvider != null) disabledItemProvider.dispose();
		if (badgeStyleItemProvider != null) badgeStyleItemProvider.dispose();
		if (display2ItemProvider != null) display2ItemProvider.dispose();
		if (pageItemProvider != null) pageItemProvider.dispose();
		if (fluidContainerItemProvider != null) fluidContainerItemProvider.dispose();
		if (strongItemProvider != null) strongItemProvider.dispose();
		if (display3ItemProvider != null) display3ItemProvider.dispose();
		if (buttonSizeItemProvider != null) buttonSizeItemProvider.dispose();
		if (verticalItemProvider != null) verticalItemProvider.dispose();
		if (linkItemProvider != null) linkItemProvider.dispose();
		if (paragrapheItemProvider != null) paragrapheItemProvider.dispose();
		if (imageItemProvider != null) imageItemProvider.dispose();
		if (linkBrandItemProvider != null) linkBrandItemProvider.dispose();
		if (alertAnimatedItemProvider != null) alertAnimatedItemProvider.dispose();
		if (activeItemProvider != null) activeItemProvider.dispose();
		if (tbodyItemProvider != null) tbodyItemProvider.dispose();
		if (tfootItemProvider != null) tfootItemProvider.dispose();
		if (tableItemProvider != null) tableItemProvider.dispose();
		if (badgePillItemProvider != null) badgePillItemProvider.dispose();
		if (navigationItemProvider != null) navigationItemProvider.dispose();
		if (basicItemProvider != null) basicItemProvider.dispose();
		if (listItemItemProvider != null) listItemItemProvider.dispose();
		if (unOrderedListItemProvider != null) unOrderedListItemProvider.dispose();
		if (alertLinkItemProvider != null) alertLinkItemProvider.dispose();
		if (borderItemProvider != null) borderItemProvider.dispose();
		if (buttonItemProvider != null) buttonItemProvider.dispose();
		if (tableCellItemProvider != null) tableCellItemProvider.dispose();
		if (titleItemProvider != null) titleItemProvider.dispose();
		if (display4ItemProvider != null) display4ItemProvider.dispose();
		if (theadItemProvider != null) theadItemProvider.dispose();
		if (orderListItemProvider != null) orderListItemProvider.dispose();
		if (basicListItemProvider != null) basicListItemProvider.dispose();
		if (alertStyleItemProvider != null) alertStyleItemProvider.dispose();
		if (centeredItemProvider != null) centeredItemProvider.dispose();
		if (buttonLinkItemProvider != null) buttonLinkItemProvider.dispose();
		if (brandItemProvider != null) brandItemProvider.dispose();
		if (display1ItemProvider != null) display1ItemProvider.dispose();
		if (tableRowItemProvider != null) tableRowItemProvider.dispose();
		if (paddingItemProvider != null) paddingItemProvider.dispose();
		if (marginItemProvider != null) marginItemProvider.dispose();
		if (coloredBorderItemProvider != null) coloredBorderItemProvider.dispose();
		if (fixContainerItemProvider != null) fixContainerItemProvider.dispose();
		if (buttonStyleItemProvider != null) buttonStyleItemProvider.dispose();
	}

}
